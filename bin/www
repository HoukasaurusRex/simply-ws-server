#!/usr/bin/env node

const debug = require('debug')('simply-ws-server:server')
const http = require('http')
const WebSocket = require('ws')
const app = require('../app')
const normalizePort = require('../utils/normalize-port')
const Users = require('../models/Users')
const Messages = require('../models/Messages')

const server = http.createServer(app)

const port = normalizePort(process.env.PORT || '3000')

const wss = new WebSocket.Server({ server })

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onHttpListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
  if (process.env.NODE_ENV !== 'production') {
    console.log(
      `HTTP server listening at ${
        addr.address === '::' ? 'http://localhost:' : addr.address
      }${addr.port}`
    )
  }
}

function onWssListening() {
  const addr = wss.address()
  console.log(
    `Websockets server listening at ${
      addr.address === '::' ? 'wss://localhost:' : addr.address
    }${wss.address().port}`
  )
}

const users = new Users()
const messages = new Messages()

function ping() {
  wss.clients.forEach(ws => {
    if (!ws.isAlive) return ws.terminate()
    ws.isAlive = false
    ws.ping(null, false, true)
  })
}

function pong() {
  this.isAlive = true
}

function broadcast(message) {
  const ws = this
  wss.clients.forEach(client => {
    if (client !== ws) {
      client.send(message)
    }
  })
}

function feedStream() {
  wss.clients.forEach(client => {
    client.send(messages.getRandomMessage())
  })
}

setInterval(feedStream, 10000)
setInterval(ping, 10000)
wss.on('connection', ws => {
  try {
    ws.broadcast = broadcast
    ws.isAlive = true
    ws.on('pong', pong)
    ws.on('message', broadcast)
    ws.on('join', (message, done) => {
      // TODO: room management
      const { name, room } = message
      users.removeUser(ws.id)
      users.addUser(ws.id, name, room)
    })
    ws.on('close', () => console.log('Client disconnected'))
    ws.send(`
      Welcome to a Simply Websockets Server,
      try emitting "message" for a response
    `)
  } catch (error) {
    console.error(error)
    ws.send(err.message)
  }
})
wss.on('listening', onWssListening)
server.listen(port)
server.on('error', onError)
server.on('listening', onHttpListening)
